parameters:
  - name: androidVersion
    type: string

jobs:
  - job: AndroidTests${{ parameters.androidVersion }}
    displayName: Android Tests (Emulator with Android v${{ parameters.androidVersion }})
    variables:
      ports:
      #ports: 5554 5556

    steps:

      - template: step-cache-gradle-files.yml

      - task: Gradle@2
        displayName: Build APKs
        inputs:
          tasks: 'assembleAndroidTest'
          gradleWrapperFile: 'gradlew'

      - script: ./gradlew createEmulator --android ${{ parameters.androidVersion }}
        displayName: Create Emulator

      - task: Bash@3
        displayName: Start Emulator
        inputs:
          targetType: inline
          script: |
            set -o pipefail
            ./azure/emulator-start-on-ci.sh $(ports)
            ./gradlew waitForEmulator
            ./azure/emulator-fix-pull-permission-denied.sh ${{ parameters.androidVersion }} $(ports)
            ./gradlew fixContentMediaAndroid
            ./azure/emulator-fix-ls-unknown-option.sh ${{ parameters.androidVersion }} $(ports)
            ./azure/emulator-fix-content-media-query.sh ${{ parameters.androidVersion }} $(ports)
            ./azure/emulator-optimize.sh $(ports)
            ./azure/emulator-collect-preconditions.sh $(ports)
            ./azure/emulator-collect-logcat.sh $(ports)

      - task: PublishPipelineArtifact@1
        displayName: Publish Emulator Settings
        inputs:
          targetPath: emulator-settings
          artifactName: Emulator ${{ parameters.androidVersion }} Settings
        condition: succeededOrFailed()

      - task: Bash@3
        displayName: Test on Emulator
        inputs:
          targetType: inline
          script: |
            # Task should fail if any bash command fail. Through pipelines the previus command result is by default ignored.
            set -o pipefail
            # Print info about test execution to have some ongoing feedback. Must be done in the same task where we want the output.
            ./azure/emulator-print-test-execution.sh $(ports)
            # Start test run
            ./azure/emulator-run-tests-parallel.sh $(ports)

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testRunTitle: UI Tests Results ${{ parameters.androidVersion }}
          mergeTestResults: true
        condition: succeededOrFailed()

      - task: Bash@3
        displayName: Prepare Emulator Screenshots
        inputs:
          targetType: inline
          script: |
            mkdir emulator-screenshots
            find */build -name screenshots.zip
            find */build -name screenshots.zip -exec unzip "{}" -d emulator-screenshots \;
            # Fail task if no screenshots exists
            [ "$(find emulator-screenshots -name "*.png")" ] || (echo "No screenshots found" && return 1)
        condition: succeededOrFailed()

      - template: step-publish-emulator-artifacts.yml
        parameters:
          androidVersion: ${{ parameters.androidVersion }}
      - template: step-cache-gradle-files-post.yml