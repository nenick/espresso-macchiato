parameters:
  - name: androidVersion
    type: string

steps:
  - task: Gradle@2
    displayName: APK Build
    inputs:
      tasks: 'assembleAndroidTest'
      gradleWrapperFile: 'gradlew'

  - task: Bash@3
    displayName: Emulator Setup
    inputs:
      filePath: 'pipelines/templates/android-emulator.sh'
      arguments: ${{ parameters.androidVersion }}

  - task: Gradle@2
    displayName: Android Tests (macchiato)
    inputs:
      tasks: 'espresso-macchiato:connectedCheck'
      gradleWrapperFile: 'gradlew'
      testResultsFiles: 'espresso-macchiato/**/TEST-*.xml'
      testRunTitle: 'espresso-macchiato-${{ parameters.androidVersion }}'

  - task: Gradle@2
    displayName: Android Tests (sampleapp)
    inputs:
      tasks: 'sampleapp:connectedCheck'
      gradleWrapperFile: 'gradlew'
      testResultsFiles: 'sampleapp/**/TEST-*.xml'
      testRunTitle: 'sampleapp-${{ parameters.androidVersion }}'

  - task: Bash@3
    displayName: Collect (Emulator Logs)
    inputs:
      filePath: 'pipelines/templates/android-emulator-logs.sh'
      arguments: '${{ parameters.androidVersion }}-logcat.txt'
    condition: succeededOrFailed()

  - publish: ${{ parameters.androidVersion }}-logcat.txt
    displayName: Publish (Emulator Logs)
    artifact: Android Emulator
    condition: succeededOrFailed()